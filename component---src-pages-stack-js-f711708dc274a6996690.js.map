{"version":3,"sources":["webpack:///./src/components/Title.js","webpack:///./src/pages/stack.js","webpack:///./src/components/SEO.js"],"names":["Hr","styled","hr","Title","children","className","Stack","Layout","SEO","title","keywords","async","src","charset","frameBorder","data-theme","data-layers","data-stack-embed","href","description","lang","meta","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps"],"mappings":"6UAKA,IAAMA,E,UAAKC,QAAOC,GAAV,KAgBOC,EAXD,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACZ,oCACE,wBAAIC,UAAU,0CAA0CD,GACxD,kBAACJ,EAAD,Q,wBCNW,SAASM,IACtB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,MAAM,QACNC,SAAS,mDAEX,kBAAC,IAAD,KACE,4BACEC,OAAK,EACLC,IAAI,wDACJC,QAAQ,WAGZ,6BAASR,UAAU,6CACjB,kBAAC,EAAD,cACA,yBAAKA,UAAU,qBACb,uBAAGA,UAAU,WAAb,mGAIA,uBAAGA,UAAU,WAAb,mCACA,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,kBACb,uBACES,YAAY,IACZC,aAAW,QACXC,cAAY,UACZC,mBAAiB,OACjBC,KAAK,2EALP,qB,4FCnBd,SAASV,EAAT,GAEI,IADFW,EACC,EADDA,YAAaC,EACZ,EADYA,KAAMC,EAClB,EADkBA,KAAMZ,EACxB,EADwBA,MAEjBa,EADP,OACOA,KAcFC,EAAkBJ,GAAeG,EAAKE,aAAaL,YAEzD,OACE,kBAAC,IAAD,CACEM,eAAgB,CACdL,QAEFX,MAAOA,EACPiB,cAAa,QAAUJ,EAAKE,aAAaf,MACzCY,KAAM,CACJ,CACEM,KAAM,cACNC,QAASL,GAEX,CACEM,SAAU,WACVD,QAASnB,GAEX,CACEoB,SAAU,iBACVD,QAASL,GAEX,CACEM,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASN,EAAKE,aAAaM,QAE7B,CACEH,KAAM,gBACNC,QAASnB,GAEX,CACEkB,KAAM,sBACNC,QAASL,IAEXQ,OAAOV,KAKfb,EAAIwB,aAAe,CACjBZ,KAAM,KACNC,KAAM,GACNF,YAAa,IAUAX","file":"component---src-pages-stack-js-f711708dc274a6996690.js","sourcesContent":["import React from 'react';\n\nimport PropType from 'prop-types';\nimport styled from 'styled-components';\n\nconst Hr = styled.hr`\n  width: 80px;\n  margin: 32px auto;\n`;\n\nconst Title = ({ children }) => (\n  <>\n    <h1 className=\"title has-text-centered has-text-light\">{children}</h1>\n    <Hr />\n  </>\n);\n\nTitle.propTypes = {\n  children: PropType.node.isRequired,\n};\n\nexport default Title;\n","import React from 'react';\nimport Helmet from 'react-helmet';\n\nimport Title from '../components/Title';\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\n\nexport default function Stack() {\n  return (\n    <Layout>\n      <SEO\n        title=\"Stack\"\n        keywords=\"React, Node, Gatsby, Front-end, developer, API\"\n      />\n      <Helmet>\n        <script\n          async\n          src=\"https://cdn1.stackshare.io/javascripts/client-code.js\"\n          charset=\"utf-8\"\n        />\n      </Helmet>\n      <section className=\"section is-size-4-desktop is-size-5-touch\">\n        <Title>Stack</Title>\n        <div className=\"has-text-centered\">\n          <p className=\"content\">\n            I have experience with many modern tools,\n            I select them for my projects depending on the usage.\n          </p>\n          <p className=\"content\">Here is my stack on StackShare:</p>\n          <div className=\"columns is-centered\">\n            <div className=\"column is-half\">\n              <a\n                frameBorder=\"0\"\n                data-theme=\"light\"\n                data-layers=\"1,2,3,4\"\n                data-stack-embed=\"true\"\n                href=\"https://embed.stackshare.io/stacks/embed/60289aae9fcafd619f2be8fc0e15d6\"\n              >\n                StackShare\n              </a>\n            </div>\n          </div>\n        </div>\n      </section>\n    </Layout>\n  );\n}\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({\n  description, lang, meta, title,\n}) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: 'description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:title',\n          content: title,\n        },\n        {\n          property: 'og:description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:type',\n          content: 'website',\n        },\n        {\n          name: 'twitter:card',\n          content: 'summary',\n        },\n        {\n          name: 'twitter:creator',\n          content: site.siteMetadata.author,\n        },\n        {\n          name: 'twitter:title',\n          content: title,\n        },\n        {\n          name: 'twitter:description',\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  description: '',\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n"],"sourceRoot":""}