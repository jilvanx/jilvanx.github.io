{"version":3,"sources":["webpack:///./src/components/Layout.js","webpack:///./src/components/Seo.js"],"names":["Layout","children","state","useContext","Context","data","theme","useTheme","styles","css","isDark","dark","background","light","siteTitle","site","siteMetadata","title","className","Date","getFullYear","to","href","src","alt","width","propTypes","PropTypes","node","isRequired","SEO","description","lang","meta","metaDescription","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","string","arrayOf","object"],"mappings":"kcAaA,MAAMA,EAAS,EAAGC,eAChB,MAAM,MAAEC,GAAUC,qBAAWC,KAEvBC,EAAI,OAUJC,EAAQC,cAEd,OACE,8BACE,YAAC,IAAD,CACEC,OAAQC,YAAF,8BAGEP,EAAMQ,OAASJ,EAAMK,KAAKC,WAAaN,EAAMO,MAAMD,WAHrD,4DAeR,YAAC,IAAD,CAAQE,UAAWT,EAAKU,KAAKC,aAAaC,QAC1C,mBAAKC,UAAU,aACb,wBAAOjB,GACP,0BACE,mBAAKiB,UAAY,iCAAgChB,EAAMQ,OAAS,iBAAmB,mBAAnF,IAEG,KACA,IAAIS,MAAOC,cAHd,aAKG,IACD,YAAC,OAAD,CACEX,IAAG,EAGHY,GAAG,KAJL,WAQA,YAAC,IAAD,MACA,oBACEZ,IAAG,GADL,QAOA,iBACEa,KAAK,2BACLb,IAAG,GAMH,kCAGA,mBACEA,IAAG,EAGHc,IAAI,wCACJC,IAAI,SACJC,MAAO,WAWvBzB,EAAO0B,UAAY,CACjBzB,SAAU0B,IAAUC,KAAKC,YAGZ7B,O,sHC5Ff,SAAS8B,GAAI,YACXC,EADW,KACEC,EADF,KACQC,EADR,MACchB,IAEzB,MAAM,KAAEF,GAAF,OAcAmB,EAAkBH,GAAehB,EAAKC,aAAae,YAEzD,OACE,YAAC,IAAD,CACEI,eAAgB,CACdH,QAEFf,MAAOA,EACPmB,cAAgB,QAAOrB,EAAKC,aAAaC,QACzCgB,KAAM,CACJ,CACEI,KAAM,cACNC,QAASJ,GAEX,CACEK,SAAU,WACVD,QAASrB,GAEX,CACEsB,SAAU,iBACVD,QAASJ,GAEX,CACEK,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASvB,EAAKC,aAAawB,QAE7B,CACEH,KAAM,gBACNC,QAASrB,GAEX,CACEoB,KAAM,sBACNC,QAASJ,IAEXO,OAAOR,KAKfH,EAAIY,aAAe,CACjBV,KAAM,KACNC,KAAM,GACNF,YAAa,IAGfD,EAAIJ,UAAY,CACdK,YAAaJ,IAAUgB,OACvBX,KAAML,IAAUgB,OAChBV,KAAMN,IAAUiB,QAAQjB,IAAUkB,QAClC5B,MAAOU,IAAUgB,OAAOd,YAGXC","file":"ae79381b03f22f0b05e8bcbb7b4f52ce56845885-431f69f9cf1ef78306fa.js","sourcesContent":["import React, { useContext } from 'react';\n\nimport { useStaticQuery, graphql, Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport { Coffee } from 'react-feather';\nimport { Global, css } from '@emotion/core';\nimport { useTheme } from 'emotion-theming';\nimport Context from '../store/context';\n\nimport '../styles/index.scss';\n\nimport Header from './header';\n\nconst Layout = ({ children }) => {\n  const { state } = useContext(Context);\n\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  const theme = useTheme();\n\n  return (\n    <>\n      <Global\n        styles={css`\n          html, body {\n            background-color:\n              ${state.isDark ? theme.dark.background : theme.light.background};\n          }\n\n          a {\n            transition: all 300ms ease;\n            &:hover {\n              color: #ffbc6b;\n            }\n          }\n\n        `}\n      />\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div className=\"container\">\n        <main>{children}</main>\n        <footer>\n          <div className={`columns is-mobile is-centered ${state.isDark ? 'has-text-light' : 'has-text-dark'}`}>\n            Â©\n            {' '}\n            {new Date().getFullYear()}\n            , Built by\n            {' '}\n            <Link\n              css={css`\n                padding: 0 4px;\n              `}\n              to=\"/\"\n            >\n              jilvanx\n            </Link>\n            <Coffee />\n            <span\n              css={css`\n                margin: 0 4px;\n              `}\n            >\n              with\n            </span>\n            <a\n              href=\"https://www.gatsbyjs.org\"\n              css={css`\n                display: flex;\n                align-items: center;\n                justify-content: center;\n              `}\n            >\n              <span>\n                Gatsby\n              </span>\n              <img\n                css={css`\n                  margin-left: 4px;\n                `}\n                src=\"https://www.gatsbyjs.org/monogram.svg\"\n                alt=\"Gatsby\"\n                width={24}\n              />\n\n            </a>\n          </div>\n        </footer>\n      </div>\n    </>\n  );\n};\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({\n  description, lang, meta, title,\n}) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: 'description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:title',\n          content: title,\n        },\n        {\n          property: 'og:description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:type',\n          content: 'website',\n        },\n        {\n          name: 'twitter:card',\n          content: 'summary',\n        },\n        {\n          name: 'twitter:creator',\n          content: site.siteMetadata.author,\n        },\n        {\n          name: 'twitter:title',\n          content: title,\n        },\n        {\n          name: 'twitter:description',\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  description: '',\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n"],"sourceRoot":""}